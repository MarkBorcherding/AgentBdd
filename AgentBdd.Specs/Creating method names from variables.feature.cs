// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace AgentBdd.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Creating method names from variables")]
    public partial class CreatingMethodNamesFromVariablesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Creating method names from variables.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Creating method names from variables", "In order to make writiing step definitions easier\r\nAs a ReSharper user\r\nI want to" +
                    " be have my step method names suggested as I type my step", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void SuggestSimpleMethodNames(string stepDescription, string methodName)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Suggest simple method names", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.When(string.Format("I provide the step \"{0}\"", stepDescription));
#line 9
testRunner.Then(string.Format("it should suggest {0} as the method name", methodName));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Suggest simple method names")]
        public virtual void SuggestSimpleMethodNames_TheFooIsCool()
        {
            this.SuggestSimpleMethodNames("the foo is cool", "the_foo_is_cool");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Suggest simple method names")]
        public virtual void SuggestSimpleMethodNames_TheFooSBar()
        {
            this.SuggestSimpleMethodNames("the foo\'s bar", "the_foos_bar");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Suggest simple method names")]
        public virtual void SuggestSimpleMethodNames_TheFooIs_Bar()
        {
            this.SuggestSimpleMethodNames("the foo is \"(.*)\" bar", "the_foo_is_bar");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Suggest simple method names")]
        public virtual void SuggestSimpleMethodNames_TheBazIsUn_Cool()
        {
            this.SuggestSimpleMethodNames("the baz is un-cool", "the_baz_is_uncool");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Suggest simple method names")]
        public virtual void SuggestSimpleMethodNames_TheFooIsCoo()
        {
            this.SuggestSimpleMethodNames("the      foo is   coo", "the_foo_is_coo");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Suggest simple method names")]
        public virtual void SuggestSimpleMethodNames_TheFooShouldBe_()
        {
            this.SuggestSimpleMethodNames("the foo should be (.*)", "the_foo_should_be");
        }
    }
}
#endregion
